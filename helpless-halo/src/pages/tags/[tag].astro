---
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogPost from '../../components/BlogPost.astro';
import type { MarkdownInstance } from 'astro';

interface PostFrontmatter {
  title: string;
  tags: string[];
}

interface Post {
  frontmatter: PostFrontmatter;
  url: string;
}
/*
export async function getStaticPaths() {
  const allPosts = await Astro.glob('../posts/*.md'); */
/*
export async function getStaticPaths(): Promise<{ params: { tag: string }, props: { posts: Post[] } }[]> {
  const allPosts: Post[] = await Astro.glob('../posts/*.md'); */

export async function getStaticPaths(): Promise<{ params: { tag: string }, props: { posts: Post[] } }[]> {
  const allPosts: MarkdownInstance<PostFrontmatter>[] = await Astro.glob('../posts/*.md');
  /*
  const uniqueTags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())]; */

  const uniqueTags: string[] = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];
  
/*
  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
} */
/*
return uniqueTags.map((tag) => {
    const filteredPosts: Post[] = allPosts
      .filter((post) => post.frontmatter.tags.includes(tag))
      .map((post) => ({ frontmatter: post.frontmatter, url: post.url }));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
} */

return uniqueTags.map((tag) => {
    const filteredPosts: Post[] = allPosts
      .filter((post) => post.frontmatter.tags.includes(tag) && post.url !== undefined)
      .map((post) => ({ frontmatter: post.frontmatter, url: post.url! }));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}



const { tag } = Astro.params;
/* const { posts } = Astro.props; */
const { posts }: { posts: Post[] } = Astro.props;
---
<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    <!--
    {posts.map((post) => <BlogPost url={post.url} title={post.frontmatter.title}/>)} -->
    {posts.map((post: Post) => (
      <BlogPost url={post.url} title={post.frontmatter.title} />
    ))}
  </ul>
</BaseLayout>